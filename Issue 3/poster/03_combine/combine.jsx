// # target indesign var myDocument = app.activeDocument;var docPath = myDocument.filePath.fsName;function setPDFSettings() {    app.interactivePDFExportPreferences.pageRange = PageRange.ALL_PAGES;    app.interactivePDFExportPreferences.exportReaderSpreads = false;    app.interactivePDFExportPreferences.viewPDF = false;    app.interactivePDFExportPreferences.generateThumbnails = false;    app.interactivePDFExportPreferences.exportLayers = false;    app.interactivePDFExportPreferences.includeStructure = true;    app.interactivePDFExportPreferences.pdfMagnification = PdfMagnificationOptions.DEFAULT_VALUE;    app.interactivePDFExportPreferences.pdfPageLayout = PageLayoutOptions.TWO_UP_FACING;    app.interactivePDFExportPreferences.openInFullScreen = false;    app.interactivePDFExportPreferences.flipPages = false;    app.interactivePDFExportPreferences.flipPagesSpeed = 5;    app.interactivePDFExportPreferences.pageTransitionOverride = PageTransitionOverrideOptions.FROM_DOCUMENT;    app.interactivePDFExportPreferences.interactivePDFInteractiveElementsOption = InteractivePDFInteractiveElementsOptions.INCLUDE_ALL_MEDIA;    app.interactivePDFExportPreferences.pdfRasterCompression = PDFRasterCompressionOptions.JPEG_COMPRESSION;    app.interactivePDFExportPreferences.pdfJPEGQuality = PDFJPEGQualityOptions.HIGH;    app.interactivePDFExportPreferences.rasterResolution = RasterResolutionOptions.ONE_HUNDRED_FORTY_FOUR_PPI;    app.interactivePDFExportPreferences.usePDFStructureForTabOrder = true;}// filter by keyfunction selectWhere(key, value, array) {    var i = array.length;    var t;    var filtered = [];    while (i--) {        t = array[i];        if (t && t[key] == value) {            filtered.push(t);        }    }    return filtered;}function selectByLabel(value, inArray) {    return selectWhere("label", value, inArray);}function relinkRectPic(id, path) {    var myGraphic = myDocument.rectangles.itemByName(id).graphics.item(0);    var myLink = myGraphic.itemLink;    var newFile = File(path);    myLink.relink(newFile);    myLink.update();}function relinkPolyPic(_id, path) {    var polygons = myDocument.polygons;    var selectedPolygon = selectByLabel(_id, polygons)[0];    var myGraphic = selectedPolygon.graphics.item(0);    var myLink = myGraphic.itemLink;    var newFile = File(path);    myLink.relink(newFile);    myLink.update();}function getTextfileContent(path) {    var file = File(path);    // Open the file for reading    file.open("r");    return file.read();}function getLine(_str, lineNr) {    return _str.split(/\r\n|\r|\n/)[lineNr];}function generateNr(_nr) {    var rootPath = docPath + "/../../DATA/generator/" + _nr + "/";    // set big pic    relinkPolyPic("pano", rootPath + "original.tif");    // get text    var text = getTextfileContent(rootPath + "info.txt");    text = getLine(text, 1);    text = text.substr(text.indexOf(" ") + 1);    // set text    myLine = selectByLabel("TXT", myDocument.textFrames)[0];    myLine.paragraphs[1].contents = text;    // update circle pic    relinkPolyPic("CIRCLE", rootPath + "export.eps");    // set position of circle graphic    var polygons = myDocument.polygons;    var selectedPolygon = selectByLabel("CIRCLE", polygons)[0];    var myGraphic = selectedPolygon.graphics.item(0);    var polyBound = selectedPolygon.geometricBounds;    var picBound = myGraphic.geometricBounds;    var xShift = polyBound[3] - picBound[3];    var yShift = polyBound[2] - picBound[2];    myGraphic.geometricBounds = [picBound[0] + yShift, picBound[1] + xShift, picBound[2] + yShift, picBound[3] + xShift];    // set nr of ex    selectByLabel("nr", myDocument.textFrames)[0].contents = "" + _nr;    // export pdf    myDocument.exportFile(ExportFormat.INTERACTIVE_PDF, File(docPath + "/../../DATA/combine/" + (_nr) + ".pdf"), false);}$.writeln("START");setPDFSettings();for (var i = 1; i <= 1000; i++) {    $.writeln("Process: " + i);    generateNr("" + i);}$.writeln("END");